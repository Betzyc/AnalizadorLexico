/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AnLex;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author betzy
 */
public class Analizador extends javax.swing.JFrame {

    char C[];
    int index = 0;
    int numID;
    int filaTodo;
    int filaSimb;

    public Analizador() {
        initComponents();

        this.setLocationRelativeTo(null);
        txtPalabra.setText("{3*(7-6)-{3*7}-[6-3]}");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtPalabra = new javax.swing.JTextField();
        btnBorrar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnAnalizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTodo = new javax.swing.JTable();
        txtComent = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtPalabra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPalabraActionPerformed(evt);
            }
        });

        btnBorrar.setText("\" \"");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnAnalizar.setText("Analizar");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        tblTodo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title Descripcion", "Lexema"
            }
        ));
        jScrollPane1.setViewportView(tblTodo);

        txtComent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtComentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPalabra)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBorrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLimpiar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAnalizar)
                        .addGap(0, 306, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addComponent(txtComent))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtPalabra, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBorrar)
                    .addComponent(btnLimpiar)
                    .addComponent(btnAnalizar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtComent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPalabraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPalabraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPalabraActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        this.txtPalabra.setText("");
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        int token, vAd, aux[];
        int indexAnterior = 0;
        C = this.txtPalabra.getText().toCharArray();

        aux = buscar();
        token = aux[0];
        vAd = aux[1];
        
        if(ValidarExpresion()){
            JOptionPane.showMessageDialog(null, "La formula esta escrita correctamente");
        } else{
            JOptionPane.showMessageDialog(null, "Error formula esta escrita incorrectamente");
        }
        
        while (token != -1 && token != 0) {
            try {
                guardar(token, vAd, indexAnterior);
            } catch (IOException ex) {
                System.out.print("Error...");
            } catch (ClassNotFoundExeption ex) {
                Logger.getLogger(Analizador.class.getName()).log(Level.SEVERE, null, ex);
            }
            indexAnterior = index;
            aux = buscar();
            token = aux[0];
            vAd = aux[1];
        }
        if (token != -1) {
            this.txtComent.setText("Terminado con exito...");
        }
        index = 0;
        
        
    }//GEN-LAST:event_btnAnalizarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        this.btnBorrarActionPerformed(evt);
        for (int i = 0; i < filaTodo; i++) {
            this.tblTodo.setValueAt(null, i, 0);
            this.tblTodo.setValueAt(null, i, 1);
            this.tblTodo.setValueAt(null, i, 2);
        }

        index = 0;
        this.txtComent.setText("");
        this.numID = 0;
        this.filaTodo = 0;

    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void txtComentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtComentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtComentActionPerformed

    private boolean esEspacio(char x) {
        return x == ' ' || x == '\t';
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Analizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Analizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Analizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Analizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Analizador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblTodo;
    private javax.swing.JTextField txtComent;
    private javax.swing.JTextField txtPalabra;
    // End of variables declaration//GEN-END:variables

    private int[] buscar() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        if (index >= C.length) {
            return new int[]{0, 0};
        }
        while (index < C.length && esEspacio(C[index])) {
            index++;
        }
        char aux;
        if (index < C.length) {
            aux = C[index];
        } else {
            return error();
        }
        switch (aux) {
            case '<': { //read print <<=>=<-->
                if (++index < C.length) {
                    if (C[index] == '-') {
                        index++;
                        return new int[]{3, '<' + '-'};
                    }
                    if (C[index] == '>') {
                        index++;
                        return new int[]{3, '<' + '>'};
                    }
                    if (C[index] == '=') {
                        index++;
                        return new int[]{3, '<' + '='};
                    }
                }
                return new int[]{3, '<'};
            }
            case '>': {
                if (++index < C.length && C[index] == '=') {
                    index++;
                    return new int[]{3, '>' + '='};
                }
                return new int[]{3, '>'};
            }
            case '=': {
                index++;
                return new int[]{3, '='};
            }
            case '+': {
                index++;
                return new int[]{3, '+'};
            }
            case '-': {
                index++;
                if (index < C.length && C[index] == '>') {
                    index++;
                    return new int[]{3, '-' + '>'};
                }
                return new int[]{3, '-'};
            }
            case '*': {
                index++;
                return new int[]{3, '*'};
            }
            case '/': {
                index++;
                if (index < C.length && C[index] == '/') {
                    while (index < C.length) {
                        index++;
                    }
                    return new int[]{1, 0};
                }
                return new int[]{3, '/'};
            }
            case '%': {
                index++;
                return new int[]{3, '%'};
            }
            case '&': {
                index++;
                return new int[]{3, '&'};
            }
            case '|': {
                index++;
                return new int[]{3, '|'};
            }
            case '¬': {
                index++;
                return new int[]{3, '¬'};
            }
            case ',': {
                index++;
                return new int[]{2, ','};
            }
            case ':': {
                index++;
                return new int[]{2, ':'};
            }
            case '$': {
                index++;
                return new int[]{2, '$'};
            }
            case ')': {
                index++;
                return new int[]{2, ')'};
            }
            case '[': {
                index++;
                return new int[]{2, '['};
            }
            case ']': {
                index++;
                return new int[]{2, ']'};
            }
            case '{': {
                index++;
                return new int[]{2, '{'};
            }
            case '}': {
                index++;
                return new int[]{2, '}'};
            }
            case '\'': {
                index++;
                if (++index < C.length && C[index] == '\'') {
                    index++;
                    return new int[]{502, 0};
                }
                return error();
            }
            case '\"': {
                while (++index < C.length && C[index] != '\"') {
                }
                if (index < C.length) {
                    index++;
                    return new int[]{503, 0};
                }
                return error();
            }
            case '(': {
                index++;
                if (index < C.length) {
                    aux = C[index];
                } else {
                    return new int[]{2, '('};
                }
                if (aux == '*') {
                    boolean t;
                    index++;
                    if (index < C.length) {
                        aux = C[index];
                    } else {
                        return error();
                    }
                    do {
                        t = false;
                        while (index < C.length && aux != '*') {
                            aux = C[index];
                            index++;
                        }
                        if (index < C.length) {
                            if (aux == C[index]) {
                                index++;
                            }
                            if (index < C.length) {
                                aux = C[index];
                            } else {
                                return error();
                            }
                            aux = C[index];
                        } else {
                            return error();
                        }
                        if (aux == ')') {
                            index++;
                            return new int[]{1, 0};
                        } else {
                            t = true;
                        }
                    } while (t);
                } else {
                    return new int[]{2, '('};
                }
                break;
            }
        }

        if (Character.isAlphabetic(aux) || aux == '_') {
            if (++index < C.length && ((C[index] >= 'a' && C[index] <= 'z')
                    || (C[index] >= 'A' && C[index] <= 'Z')
                    || Character.isDigit(C[index]))
                    && !esEspacio(C[index])) {
                while (++index < C.length && ((C[index] >= 'a' && C[index] <= 'z')
                        || (C[index] >= 'A' && C[index] <= 'Z')
                        || Character.isDigit(C[index]))
                        && !esEspacio(C[index])) {
                }
            }
            return new int[]{1000, 0};
        }
        if (Character.isDigit(aux)) {
            while (++index < C.length && Character.isDigit(C[index])) {
            }
            if (index < C.length && C[index] == '.') {//var a, b<-9.23, c<-3:float
                if (++index < C.length && Character.isDigit(C[index])) {
                    while (++index < C.length && Character.isDigit(C[index])) {
                    }
                    return new int[]{501, 0};
                } else {
                    return error();
                }
            } else {
                if (!Character.isDigit(aux)) {
                    index--;
                }
                return new int[]{500, 0};
            }
        } else {
            return error();
        }
    }

    private int[] error() {
        this.txtComent.setText("Para por error...");
        return new int[]{-1, 0};
    }

    private void guardar(int token, int vAd, int indexAnt) throws IOException, ClassNotFoundExeption {
        // throw new UnsupportedOperationException("Not supported yet.");
        String desc = ""; //descripcion
        String dato = "";
        for (int i = indexAnt; i < index; i++) {
            if (!esEspacio(C[i])) {
                dato += String.valueOf(C[i]);
            }
        }
        switch (token) {
            case 1: {    //Comentario
                System.out.println("Hubo un comentario...");
                return;
            }

            case 2: {
                desc = "Simbolo: ";
                switch (vAd) {
                    case ':': {
                        desc += "Dos puntos";
                        break;
                    }
                    case ',': {
                        desc += "Coma";
                        break;
                    }
                    case '$': {
                        desc += "Separador de sentencias for";
                        break;
                    }
                    case '#': {
                        desc += "Protegido";
                        break;
                    }
                    case '(': {
                        desc += "Abre parentesis";
                        break;
                    }
                    case ')': {
                        desc += "Cierra parentesis";
                        break;
                    }
                    case '[': {
                        desc += "Abre corchetes";
                        break;
                    }
                    case ']': {
                        desc += "Cierra corchetes";
                        break;
                    }
                    case '{': {
                        desc += "Abre llaves";
                        break;
                    }
                    case '}': {
                        desc += "Cierra llaves";
                        break;
                    }
                }
                token += vAd;
                break;
            }
            case 3: {
                desc = "Operador ";
                switch (vAd) {
                    case '<': {
                        desc += "relacional: Menor";
                        break;
                    }
                    case '<' + '=': {
                        desc += "relacional: Menor o igual";
                        break;
                    }
                    case '>': {
                        desc += "relacional: Mayor";
                        break;
                    }
                    case '>' + '=': {
                        desc += "relacional: Mayor o igual";
                        break;
                    }
                    case '<' + '>': {
                        desc += "relacional: Diferente";
                        break;
                    }
                    case '=': {
                        desc += "relacional: Igual";
                        break;
                    }
                    case '+': {
                        desc += "aritmetico: Suma (publico)";
                        break;
                    }
                    case '-': {
                        desc += "aritmetico: Resta (privado)";
                        break;
                    }
                    case '*': {
                        desc += "aritmetico: Multiplicacion";
                        break;
                    }
                    case '/': {
                        desc += "aritmetico: Division";
                        break;
                    }
                    case '%': {
                        desc += "aritmetico: Resto de la division";
                        break;
                    }
                    case '&': {
                        desc += "logico: AND";
                        break;
                    }
                    case '|': {
                        desc += "logico: OR";
                        break;
                    }
                    case '¬': {
                        desc += "logico: NOT";
                        break;
                    }
                    case '<' + '-': {
                        desc += "de Asignacion";
                        break;
                    }
                    case '-' + '>': {
                        desc += "de Acceso";
                        break;
                    }
                }
                token += vAd;
                break;
            }
            case 500: {
                desc = "Entero";
                break;
            }
            case 501: {
                desc = "Real";
                break;
            }
            /*case 502: {
                desc = "Caracter";
                break;
            }
            case 503: {
                desc = "Cadena";
                break;
            }*/
            default: {
                System.out.println("Error...");
                return;
            }
        }
        // token, des, lexema
        this.tblTodo.setValueAt(String.valueOf(token), this.filaTodo, 0);
        this.tblTodo.setValueAt(String.valueOf(desc), this.filaTodo, 1);
        this.tblTodo.setValueAt(dato, this.filaTodo, 2);
        filaTodo++;
    }

    private boolean esEspacio(char x, char[] extra) {
        boolean t = x == ' ';
        if (!t) {
            for (char aux : extra) {
                if (x == aux) {
                    return true;
                }
            }
            return false;
        }
        return true;
    }

    public boolean ValidarExpresion() {
        Pila pila = new Pila();
        String cadena = txtPalabra.getText();

        for (int i = 0; i < cadena.length(); i++) {
            if (cadena.charAt(i) == '(' || cadena.charAt(i) == '[' || cadena.charAt(i) == '{') {
                pila.Insertar(cadena.charAt(i));
            } else {
                if (cadena.charAt(i) == ')') {
                    if (pila.extraer() != '(') {
                        return false;
                    }
                } else {
                    if (cadena.charAt(i) == ']') {
                        if (pila.extraer() != '[') {
                            return false;
                        }

                    } else {
                        if (cadena.charAt(i) == '}') {
                            if (pila.extraer() != '{') {
                                return false;
                            }
                        }

                    }
                }
            }
            
        }
        return pila.PilaVacia();
    }
    /*private Integer seEncuentra(String Id){
        String aux;
        for(int i=0; i<numID; i++){
            aux=(String) this.tblSimb.getValueAt(i, 2);
            if(aux.equals(Id)){
                return i;
            }
        }
        return -1;
    }*/
}
